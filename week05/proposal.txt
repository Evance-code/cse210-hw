CSE 111 Proposal: Personal Finance Tracker
1. Title
Personal Finance Tracker

2. Problem Being Solved
Many people struggle with managing their finances—tracking expenses, sticking to budgets, and understanding spending habits. This program will help users:
✔ Log income and expenses
✔ Categorize transactions (e.g., food, rent, entertainment)
✔ Calculate spending summaries
✔ Detect overspending in budget categories

3. What I Will Learn
✅ File I/O – Save and load transactions from CSV/JSON files
✅ Data Validation – Ensure correct input formats (dates, numbers)
✅ Dictionary Operations – Organize and analyze spending by category
✅ Error Handling – Manage missing files or invalid data
✅ Testing with pytest – Verify calculations and file operations

4. Python Modules
Module	Purpose
csv	Store transactions in a simple, Excel-friendly format
datetime	Validate dates and filter transactions by time
json (optional)	Save user preferences (e.g., default categories)
pytest	Test core functions for reliability


5. Key Functions
Core Functions (Reusable & Testable)
python

def add_transaction(amount: float, category: str, date: str, notes: str = "") -> bool  
    """Validates and saves a transaction. Returns True if successful."""  

def delete_transaction(transaction_id: int) -> bool  
    """Removes a transaction by ID. Returns success status."""  

def calculate_spending_by_category(start_date: str, end_date: str) -> dict  
    """Returns totals per category, e.g., {'food': 150.0, 'rent': 1000.0}."""  

def check_budget(budget_limits: dict) -> dict  
    """Compares spending to budget. Returns overspending alerts."""  

def load_transactions(filename: str) -> list[dict]  
    """Reads transactions from file. Returns empty list if file missing."""  

def save_transactions(filename: str, transactions: list) -> None  
    """Saves transactions to CSV."""  
User Interaction Functions
python
   def input_transaction() -> None  
    """Guides user to enter a new transaction with validation."""  

   def show_spending_summary() -> None  
    """Prints a formatted spending report to the console."""  

6. Test Functions
python
   def test_add_transaction_rejects_invalid_input()  
    """Tests if negative amounts or empty categories are rejected."""  

   def test_calculate_spending_by_category()  
    """Checks if category sums are calculated correctly."""  

    def test_budget_alerts()  
    """Verifies overspending detection."""  

    def test_file_operations()  
    """Ensures transactions load/save correctly."""  